{"ast":null,"code":"var _jsxFileName = \"/home/navgurukul/Desktop/online-code-editor/src/components/Preview.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef } from 'react';\n\n// const Preview = ({ html, css, js }) => {\n//   const iframeRef = useRef(null);\n\n//   useEffect(() => {\n//     const document = iframeRef.current.contentDocument;\n//     const documentContents = `\n//       <html>\n//         <head>\n//           <style>${css}</style>\n//         </head>\n//         <body>\n//           ${html}\n//           <script>${js}<\\/script>\n//         </body>\n//       </html>\n//     `;\n//     document.open();\n//     document.write(documentContents);\n//     document.close();\n//   }, [html, css, js]);\n\n//   return (\n//     <div className=\"preview-pane\">\n//       <iframe title=\"Preview\" ref={iframeRef} />\n//     </div>\n//   );\n// };\n\n// export default Preview;\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Preview = ({\n  html,\n  css,\n  js\n}) => {\n  _s();\n  const iframeRef = useRef(null);\n  const hasExecuted = useRef(false); // Track if the JavaScript has been executed\n\n  useEffect(() => {\n    if (!hasExecuted.current) {\n      const iframe = iframeRef.current;\n      const document = iframe.contentDocument || iframe.contentWindow.document;\n\n      // HTML content to be injected into the iframe\n      const documentContents = `\n        <html>\n          <head>\n            <style>${css}</style>\n          </head>\n          <body>\n            ${html}\n            <script>\n              (function() {\n                // Override console.log to display messages in the iframe\n                const originalLog = console.log;\n                console.log = function(message) {\n                  const output = document.createElement('div');\n                  output.textContent = message;\n                  output.style.color = 'black';\n                  document.body.appendChild(output);\n                  originalLog.apply(console, arguments);\n                };\n                \n                try {\n                  ${js}\n                } catch (error) {\n                  const errorOutput = document.createElement('div');\n                  errorOutput.textContent = 'Error: ' + error.message;\n                  errorOutput.style.color = 'red';\n                  document.body.appendChild(errorOutput);\n                }\n              })();\n            <\\/script>\n          </body>\n        </html>\n      `;\n\n      // Write content to the iframe\n      document.open();\n      document.write(documentContents);\n      document.close();\n      hasExecuted.current = true; // Mark the JavaScript as executed\n    }\n  }, [html, css, js]); // Effect depends on html, css, and js changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-pane\",\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: \"Preview\",\n      ref: iframeRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Preview, \"gXEgLGxL/dG3fhhzNd148Flt1cI=\");\n_c = Preview;\nexport default Preview;\nvar _c;\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Preview","html","css","js","_s","iframeRef","hasExecuted","current","iframe","document","contentDocument","contentWindow","documentContents","open","write","close","className","children","title","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/navgurukul/Desktop/online-code-editor/src/components/Preview.js"],"sourcesContent":["// import React, { useEffect, useRef } from 'react';\n\n// const Preview = ({ html, css, js }) => {\n//   const iframeRef = useRef(null);\n\n//   useEffect(() => {\n//     const document = iframeRef.current.contentDocument;\n//     const documentContents = `\n//       <html>\n//         <head>\n//           <style>${css}</style>\n//         </head>\n//         <body>\n//           ${html}\n//           <script>${js}<\\/script>\n//         </body>\n//       </html>\n//     `;\n//     document.open();\n//     document.write(documentContents);\n//     document.close();\n//   }, [html, css, js]);\n\n//   return (\n//     <div className=\"preview-pane\">\n//       <iframe title=\"Preview\" ref={iframeRef} />\n//     </div>\n//   );\n// };\n\n// export default Preview;\nimport React, { useEffect, useRef } from 'react';\n\nconst Preview = ({ html, css, js }) => {\n  const iframeRef = useRef(null);\n  const hasExecuted = useRef(false); // Track if the JavaScript has been executed\n\n  useEffect(() => {\n    if (!hasExecuted.current) {\n      const iframe = iframeRef.current;\n      const document = iframe.contentDocument || iframe.contentWindow.document;\n\n      // HTML content to be injected into the iframe\n      const documentContents = `\n        <html>\n          <head>\n            <style>${css}</style>\n          </head>\n          <body>\n            ${html}\n            <script>\n              (function() {\n                // Override console.log to display messages in the iframe\n                const originalLog = console.log;\n                console.log = function(message) {\n                  const output = document.createElement('div');\n                  output.textContent = message;\n                  output.style.color = 'black';\n                  document.body.appendChild(output);\n                  originalLog.apply(console, arguments);\n                };\n                \n                try {\n                  ${js}\n                } catch (error) {\n                  const errorOutput = document.createElement('div');\n                  errorOutput.textContent = 'Error: ' + error.message;\n                  errorOutput.style.color = 'red';\n                  document.body.appendChild(errorOutput);\n                }\n              })();\n            <\\/script>\n          </body>\n        </html>\n      `;\n\n      // Write content to the iframe\n      document.open();\n      document.write(documentContents);\n      document.close();\n\n      hasExecuted.current = true; // Mark the JavaScript as executed\n    }\n  }, [html, css, js]); // Effect depends on html, css, and js changes\n\n  return (\n    <div className=\"preview-pane\">\n      <iframe title=\"Preview\" ref={iframeRef} />\n    </div>\n  );\n};\n\nexport default Preview;\n\n"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,OAAO,GAAGA,CAAC;EAAEC,IAAI;EAAEC,GAAG;EAAEC;AAAG,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMS,WAAW,GAAGT,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,WAAW,CAACC,OAAO,EAAE;MACxB,MAAMC,MAAM,GAAGH,SAAS,CAACE,OAAO;MAChC,MAAME,QAAQ,GAAGD,MAAM,CAACE,eAAe,IAAIF,MAAM,CAACG,aAAa,CAACF,QAAQ;;MAExE;MACA,MAAMG,gBAAgB,GAAG;AAC/B;AACA;AACA,qBAAqBV,GAAG;AACxB;AACA;AACA,cAAcD,IAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoBE,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;MAED;MACAM,QAAQ,CAACI,IAAI,CAAC,CAAC;MACfJ,QAAQ,CAACK,KAAK,CAACF,gBAAgB,CAAC;MAChCH,QAAQ,CAACM,KAAK,CAAC,CAAC;MAEhBT,WAAW,CAACC,OAAO,GAAG,IAAI,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACN,IAAI,EAAEC,GAAG,EAAEC,EAAE,CAAC,CAAC,CAAC,CAAC;;EAErB,oBACEJ,OAAA;IAAKiB,SAAS,EAAC,cAAc;IAAAC,QAAA,eAC3BlB,OAAA;MAAQmB,KAAK,EAAC,SAAS;MAACC,GAAG,EAAEd;IAAU;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACnB,EAAA,CAzDIJ,OAAO;AAAAwB,EAAA,GAAPxB,OAAO;AA2Db,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}